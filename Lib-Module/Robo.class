/**
 @author : Mohamed Rashad
 **/


package com.pi.autotype;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import android.os.Handler;
import android.os.Message;

public class Typee {

	static int i,ii;
	static String[] x;
	static Handler mainhandler;
	static Class cls;
	static Method m;
	static Object obj;

	
	
	/*
	 This method is responsible for automatic typing process

	 message : the string to be auto-typed
	 speed : the speed of writing
	 */

	public static void update(final String message, final String className, int speed){



		//String parameter
		final Class[] par= new Class[1];	
		par[0] = String.class;



        //split the string to a String[ ]
		x = message.split("");

		//getting speed and setting characters count to zero
		i = 0;
		ii = speed;


		//this handles the code of auto typing
		mainhandler = new Handler() {

			@Override
			public void handleMessage(Message msg)
			{
				super. handleMessage(msg);

				/** 
				 simple check, when the value of i only
				 is less than the array length the autotyping
				 is excuted

				 **/


				if (i < x.length)
				{

					i++;

					if (i >= x.length)
					{					

					}

					else
					{						
						/**						
					      in order to get access to multiple classes at anytime
						   I used a reflection technique
						   which calls a class and invoke the Robo method in it 
						   automatically		
						**/
						try
						{
							
							cls = Class.forName(className);			
							obj = cls.newInstance();		
							m = cls.getDeclaredMethod("Robo", par);																	
							m.invoke(obj, x[i]);
										
						}
						
						catch (ClassNotFoundException e)
	             		{}	

						catch (InstantiationException e)
						{}
						
						catch (IllegalAccessException e)
						{}		
						
						catch (NoSuchMethodException e)
						{}		
						
						catch (IllegalArgumentException e)
						{}
						
						catch(InvocationTargetException e)
						{}
						
						
				}							

				}
				else
				{

				}

			}
		};
		new Thread(new Runnable() {
				public void run()
				{
					while (true)
					{
						try
						{

							//sets the delay  before typing next letter
							Thread . sleep(ii);
							mainhandler.sendEmptyMessage(0);

						}
						catch (InterruptedException e)
						{

							e . printStackTrace();

						}
					}
				}
			}) . start();
	}
}
